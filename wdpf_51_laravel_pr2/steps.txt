        ====================== Info ==============
1. composer create-project laravel/laravel:^8.0 wdpf_51_laravel_pr2
2. php artisan make:model Product -mcr
3. php artisan migrate
4. php artisan make:seeder ProductSeeder
5. php artisan make:factory productFactory
6. php artisan db:seed

                        ========= Database seed =============


1. php artisan make:model Product -mcr

2. database\migrations\2023_01_10_094913_create_products_table.php

     public function up()
    {
        Schema::create('products', function (Blueprint $table) {
            $table->increments('id');
            $table->string("product_name", 150);
            $table->string("product_details", 300);
            $table->double("product_price", 6,2);
            $table->string("product_image");
            $table->tinyInteger("product_category");
            $table->timestamps();
        });
    }

  cli:   php artisan migrate


3. php artisan make:factory productFactory

**go to : database\factories\productFactory.php


        namespace Database\Factories;
        use App\Models\Product;


        use Illuminate\Database\Eloquent\Factories\Factory;

        class productFactory extends Factory
        {
            /**
            * Define the model's default state.
            *
            * @return array
            */
            public function definition()
            {

                return [
                    'product_name' => $this->faker->name(),
                    'product_details' => $this->faker->text(),
                    'product_price' => $this->faker->randomDigit(),
                    'product_image' => $this->faker->imageUrl(640,480),
                    'product_category' => $this->faker->randomDigit(),

                ];
            }
        }

4. database\seeders\DatabaseSeeder.php

        // Product::factory(100)->create();
        \App\Models\Product::factory(100)->create();;

5.  php artisan db:seed
    OR
    php artisan migrate:fresh --seed



                OR Manually seed


**. php artisan make:seeder ProductSeeder

    public function run(){

        for($i=0; $i<= 100; $i++) {

                DB::table('products')->insert([
                    'product_name' => Str::random(15),
                    'product_details' => Str::random(30),
                    'product_price' => '200.00',
                    'product_image' => 'assets/images/no_photo.jpg',
                    'product_category' => '1',

                ]);
        }

    }


**. database\seeders\DatabaseSeeder.php

    public function run()
    {
        // User::factory(10)->create();
        // Product::factory(10)->create();

        $this->call([
            ProductSeeder::class
        ]);
    }

    php artisan db:seed

==================================================================================================

1. php artisan make:controller dashboardController
2. show route list
    php artisan route:list

    =================== Crud =====================

1. use Illuminate\Support\Str;

    {{ Str::of($product->product_details)->words(5,'>>>') }}

    {{ Str::limit($product->product_details,30,'>>>') }}


                        ** Paginate **
 1. app\Http\Controllers\ProductController.php

    $products = Product::latest()->paginate(10);
    return view('backend.products.index', compact('products', 'cats'));

2. frontend
      {{ $products->links() }}

OR

1. php artisan vendor:publish --tag=laravel-pagination

2. frontend show
    {{ $products->links('vendor.pagination.bootstrap-4') }}


                        ===================== Image upload ==============

1. app\Http\Controllers\ProductController.php

    if($request->product_image){
                $imageName = time().'.'.$request->product_image->extension();
                $request->product_image->move(public_path('product_photos'), $imageName);
                $data->product_image =  $imageName;
            }else{
                $data->product_image =  "";
            }
     $data->save();

2. resources\views\backend\products\create.blade.php

    <input class="form-group" type="file" name="product_image" id="product_image">

3. resources\views\backend\products\index.blade.php   show imageName
    src="{{ 'product_photos/'.$product->product_image }}"


            ========= show  =============

1. resources\views\backend\products\index.blade.php
    <a href="{{ route('products.show', $product->id ) }}">

2. controller
     public function show(Product $product){
        return view('backend.products.single');
    }

==== edit ===



1.  resources\views\backend\products\index.blade.php
<a href="{{ route('products.edit', $product->id) }}"><em class="icon ni ni-edit"></em><span>Edit
    Products</span></a>


2. controller

    public function edit(Product $product){

        $cats = Category::get();
        return view('backend.products.edit', compact('product', 'cats'));
    }

3. edit.blade.php

    value="{{ old('product_stock') ? old('product_stock') : $product->product_stock }}"

select Category

        <option {{ old('product_category') ? (old('product_category') == $cat->id ? 'selected' : '') : ($product->product_category == $cat->id ? 'selected' : '' ) }}
                value="{{ $cat->id }}">

                {{ $cat->cat_name }}

        </option>




=================== Delete =====================
1. index.blade.php

 <form action="{{ route('products.destroy', $product->id) }}" class="remove" id="remove" method="post" onsubmit="return confirm('Are you want to sure Delete?')" >

        @csrf
        {{method_field('DELETE')}}

        <a href=""></a><em class="icon ni ni-trash"></em>
        <input type="submit" class="btn btn-warning " value="Delete" />
</form>

2.


        ====== CSS error vite @vite(['resources/css/app.css', 'resources/js/app.js']) ========

@vite(['resources/css/app.css', 'resources/js/app.js']) => Remove this and add following

<link rel="stylesheet" href="{{ asset('css/app.css') }}">
<script src="{{ asset('js/app.js') }}" defer></script>


        ======== Double  Database Laravel =========

1. config\database.php

     'connections' => [

        //..
    'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'wdpf51_laravel_project02'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mysqlOne' => [
            'driver' => 'mysql',
            'host' => env('DB_HOST_ONE', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE_ONE', 'wdpf51_sampledb'),
            'username' => env('DB_USERNAME_ONE', 'root'),
            'password' => env('DB_PASSWORD_ONE', ''),
            'charset' => 'utf8',
            'collation' => 'utf8_unicode_ci',
            'prefix' => '',
            'strict' => false,
            'engine' => null,
        ],

    ]


2. In controller

        $conn = DB::connection('mysqlOne');

        $datas =   $conn->table('offices')->select('*')->get();

        echo "<pre>";
        print_r($datas);

         return view('test', compact('datas'));
